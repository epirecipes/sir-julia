
# Jump process using Fleck.jl
Simon Frost (@sdwfrost) and Sean L. Wu (@slwu89), 2023-12-15

## Introduction

This is an example of a jump process model using [Fleck.jl](https://github.com/adolgert/Fleck.jl), which samples continuous-time probability distributions with time-varying hazard rates; you provide the probability distribution functions, and it tells you which fires next. 
The core concepts of Fleck are that of a sampler and of clocks. Each clock corresponds to an event which may occur in the future. A sampler keeps track of all enabled clocks, via a key type that is used to uniquely identify them.
The sampler knows the distributions of all clocks, and when they were enabled. The main things you can do are tell a sampler to `enable!` a new clock, `disable!` a current clock, and ask it which clock fires next and when, with `next`.
Fleck has a panopoly of sampling algorithms, including the first reaction method, direct methods, next reaction methods, among others, so that users can design a sampling scheme most appropriate for their simulation.

## Libraries

```julia
using Random
using Plots
using Distributions
using Fleck
```

## Model struct

Because Fleck is a library for users to depend upon to build their own stochastic modeling frameworks, we define a struct `SIRNonMarkov`
to create a very small modeling applications just for SIR models here. Because every time a new clock is enabled, it needs a new
key, we define a method `get_key!` that grabs a new integer and increments the counter stored in the struct.

The SIR model we consider here has the standard Exponential clock for infection events, but allows recovery to follow a general distribution.

```julia
mutable struct SIRNonMarkov{T<:Distribution}
    state::Vector{Int}
    parameters::Vector{Float64}
    next_key::Int
    infection_rate::Float64
    recovery_distribution::T
    time::Float64
end

function get_key!(model::SIRNonMarkov)
    key = model.next_key
    model.next_key += 1
    return key
end
```

## Initialization

To initialize the model, we need to enable the infection clock, and, for each initially infectious person, enable a recovery clock.

```julia
function initialize!(model::SIRNonMarkov, sampler, rng)
    (β, c, γ) = model.parameters
    # enable the infection transition
    enable!(sampler, (:infection, get_key!(model)), Exponential(1.0/(β*c*model.state[2]/sum(model.state)*model.state[1])), model.time, model.time, rng)
    # enable the recovery transitions
    for _ in 1:model.state[2]
        enable!(sampler, (:recovery, get_key!(model)), model.recovery_distribution, model.time, model.time, rng)
    end
end
```

## Stepping

Given the next time `when` and key `which` telling us what clock fires next and when, we write a function that updates state. We assume that
we are using `Tuple{Symbol,Int}` as a key, so the first element of the clock key tells us what kind of event fired.

```julia
function step!(model::SIRNonMarkov, sampler, when, which, rng)
    (β, c, γ) = model.parameters
    model.time = when
    if first(which) == :infection
        model.state[1] -= 1
        model.state[2] += 1
        # disable and reenable the infection clock after accounting for the new rate
        disable!(sampler, which, model.time)
        enable!(sampler, which, Exponential(1.0/(β*c*model.state[2]/sum(model.state)*model.state[1])), model.time, model.time, rng)
        # enable a recovery event for the newly infected person
        enable!(sampler, (:recovery, get_key!(model)), model.recovery_distribution, model.time, model.time, rng)
    elseif first(which) == :recovery
        model.state[2] -= 1
        model.state[3] += 1
        disable!(sampler, which, model.time)
    else
        error("unrecognized clock key: $(which)")
    end
end
```

## Time domain

```julia
tmax = 40.0;
```

## Initial conditions

```julia
u0 = [990, 10, 0]; # S, I, R
```

## Parameter values

```julia
p = [0.05, 10.0, 0.25]; # β, c, γ
```

## Random number seed

```julia
seed = 1234
rng = MersenneTwister(seed);
```

## Running the model

We make an instance of our model struct. First we use a Dirac (deterministic) recovery time. We choose the `CombinedNextReaction` sampler for our simulation,
which is competitive across a variety of distribution types.

```julia
sirmodel = SIRNonMarkov(deepcopy(u0), p, 0, prod(p[1:2]), Dirac(1/p[3]), 0.0)
sampler = CombinedNextReaction{Tuple{Symbol,Int}}()
rng = Xoshiro()
```

We store the output in a pre-allocated matrix.

```julia
output = zeros(prod(sirmodel.state[1:2])+sum(sirmodel.state[1:2])+1, 4)
nout = 1
output[nout,:] = [sirmodel.time; sirmodel.state]
nout += 1
```

We then initialize and run the model.

```julia
initialize!(sirmodel, sampler, rng)

(when, which) = next(sampler, sirmodel.time, rng)

while when ≤ tmax
    step!(sirmodel, sampler, when, which, rng)
    (when, which) = next(sampler, sirmodel.time, rng)

    output[nout,:] = [sirmodel.time; sirmodel.state]
    nout += 1
end
```

## Plotting

```julia
plot(
    output[1:nout-1,1], 
    output[1:nout-1,2:end],
    label=["S" "I" "R"],
    xlabel="Time",
    ylabel="Number"
)
```

## Changing the recovery distribution


It is very simple to use other distributions in Fleck. We change the Dirac recovery distribution to a Gamma(4,1) and plot results.

```julia
sirmodel = SIRNonMarkov(deepcopy(u0), p, 0, prod(p[1:2]), Gamma(4,1), 0.0)
sampler = CombinedNextReaction{Tuple{Symbol,Int}}()
rng = Xoshiro()

output = zeros(prod(sirmodel.state[1:2])+sum(sirmodel.state[1:2])+1, 4)
nout = 1
output[nout,:] = [sirmodel.time; sirmodel.state]
nout += 1

initialize!(sirmodel, sampler, rng)

(when, which) = next(sampler, sirmodel.time, rng)

while when ≤ tmax
    step!(sirmodel, sampler, when, which, rng)
    (when, which) = next(sampler, sirmodel.time, rng)

    output[nout,:] = [sirmodel.time; sirmodel.state]
    nout += 1
end

plot(
    output[1:nout-1,1], 
    output[1:nout-1,2:end],
    label=["S" "I" "R"],
    xlabel="Time",
    ylabel="Number"
)
```